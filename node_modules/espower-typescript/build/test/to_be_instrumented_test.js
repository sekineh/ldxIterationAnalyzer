'use strict';
var assert = require('power-assert');
var expect = require('expect.js');
var mycomponent_tsx_1 = require('./lib/mycomponent.tsx');
describe('power-assert message', function () {
    beforeEach(function () {
        this.expectPowerAssertMessage = function (body, expectedLines) {
            try {
                body();
                expect().fail('AssertionError should be thrown');
            }
            catch (e) {
                expect(e.message.split('\n').slice(2, -1).join('\n')).to.eql(expectedLines);
            }
        };
    });
    it('Nested CallExpression with BinaryExpression: assert((three * (seven * ten)) === three)', function () {
        var one = 1;
        var two = 2;
        var three = 3;
        var seven = 7;
        var ten = 10;
        var expected = "  assert(three * (seven * ten) === three)\n         |     |  |     | |    |   |     \n         |     |  |     | |    |   3     \n         |     |  |     | 10   false     \n         |     |  7     70               \n         3     210                       \n  \n  [number] three\n  => 3\n  [number] three * (seven * ten)\n  => 210";
        this.expectPowerAssertMessage(function () {
            assert(three * (seven * ten) === three);
        }, expected);
    });
    it('equal with Literal and Identifier: assert.equal(1, minusOne)', function () {
        var minusOne = -1;
        var expected = "  assert.equal(1, minusOne)\n                  |        \n                  -1       ";
        this.expectPowerAssertMessage(function () {
            assert.equal(1, minusOne);
        }, expected);
    });
    it('jsx:react', function () {
        var expected = "  assert.equal(1, mycomponent_tsx_1.default())\n                  |                 |         \n                  |                 Object{\"$$typeof\":Symbol(react.element),type:\"input\",key:null,ref:null,props:#Object#,_owner:null,_store:#Object#}\n                  Object{default:#function#}  ";
        this.expectPowerAssertMessage(function () {
            assert.equal(1, mycomponent_tsx_1.default());
        }, expected);
    });
});
